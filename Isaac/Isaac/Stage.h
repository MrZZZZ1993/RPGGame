#pragma once
class CStage
{
public:
	CStage();
	~CStage();
	void readFromFile(TSTRING);
	void Draw();
	void Update();
	void Move();
	void Collision();
	void SetVisible(bool);
	void DrawMoney();
	void DrawGoods();
	void DrawMatherHeart();
	void DrawEnemyBullet();
	void DrawFeceMonster();
	void DrawMaskHeart();
	void DrawMask();
	void DrawMonsterDead();
	void DrawBob();
	void DrawTile();
	void DrawBombExplode();
	void DrawBlood();
	void DrawDoor();
	void DrawMap();
	void DrawFire();
	void DrawFly();
	void DrawFlyMonster();
	void DrawPlayer();
	void DrawFlyDuke();
	void DrawStartSurface();
	void DrawGuide();
	void DrawExlpodeBlood();
	void DrawPlayerHeart();
	void DrawGoldenBox();
	void UpdateMoney();
	void UpdateGoldenBox();
	void UpdateEnemyBullet();
	void UpdateMonsterDead();
	void UpdateBob();
	void UpdateBombExplode();
	void UpdateExplodeBlood();
	void UpdateFire();
	void UpdateFly();
	void UpdateFlyMonster();
	void UpdateFlyDuke();
	void UpdatePlayer();
	void UpdateDoor();
	void UpdateGuide();
	void UpdateMatherHeart();
	void FireMove(int);
	void FlyMoveOnMap(int);
	void FlyMonsterMove(Map*);
	void FlyMonsterMoveOnMap(int);
	void FeceMonsterMove();
	void BobMoveOnMap(int);
	void DoorMoveOnMap(int);
	void LegMoveOnMap(int);
	void PlayerMove(Map*,int,int);
	void BulletMove(Map*,int,int);
	void MaskMove();
	void BobMove(Map*);
	void MaskHeartMove();
	void EnemyBulletMove();
	void GoodsMove();
	void TileMove();
	void FlyDukeMove();
	void FlyDukeFireFly();
	void IsPlayerUpdate(Map*, Map*, int, int);
	void MapChange();
	void MapMove();
	void InitCollision();
	void BombExplode_MaskHeart();
	void BombExplode_Fly();
	void BombExplode_FlyDuke();
	void BombExplode_Fire();
	void BombExplode_FlyMonster();
	void BombExplode_Bob();
	void BombExplode_Mask();
	void BombExplode_FeceMonster();
	void BombExplode_Mother();
	void Bullet_MaskHeart();
	void Bullet_Fly();
	void Bullet_FlyDuke();
	void Bullet_Fire();
	void Bullet_FlyMonster();
	void Bullet_Bob();
	void Bullet_Mask();
	void Bullet_FeceMonster();
	void Bullet_MatherHeart();
	void Money_Player();
	void Goods_Player();
	void GoldenBox_Player();
	void Bullet_Player();
	void FeceMonster_Player();
	void Mask_Player();
	void Fire_Player();
	void Fire_Fly();
	void Fly_Player();
	void FlyDuke_Player();
	void FlyMonster_Player();
	void BombExplode_Player();
	void MaskHeart_Player();
	void Bob_Player();
	void Tile_Player();
	void StartSurfaceMove();
	void BackFly(CBullet*,CFly*);
	void BackMask(CBullet*,CMask*);
	void PlayerBeHurted(POINT);
	void Recover();
	void IsShoot(Map*, int, int, int);
	void ShotFeces(Map*);
	void MatherHeartAttack();
	void MatherHeartFireBob();
	void UseGoods();
	void BombExplode(POINT,int,int);
	void LegAttack();
	void Leg_Fly();
	void Leg_Bob();
	void Leg_FlyMonster();
	void Leg_FlyDuke();
	void Leg_Mask();
	void Leg_FeceMonster();
	void Leg_MaskHeart();
	void Leg_MotherHeart();
	void SelectGoods();
	RECT SortRect(RECT,RECT);
	bool IsFlyDuke_Bullet_Collision(RECT, RECT);
	bool IsFlyDuke_PlayerBody_Collision(RECT,RECT);
	bool IsFlyDuke_PlayerHead_Collision(RECT, RECT);
	bool IsHit(RECT, RECT);
	bool IsMonsterInRoom();
	Map*GetMap(int);
	Map*GetStone(int);
	CPlayerHead*GetPlayerHead();
	CPlayerBody*GetPlayerBody();
	CPoolManager*GetBulletPool();
	CFlyDuke*GetFlyDuke();
	CMatherHeart*GetMatherHeart();
	int GetBossHp();
	void SetGoodsCount(int);
private:
	float m_VSScale;
	float m_angle;
	float m_angle1;
	int m_bossHP;
	int m_bossHPSum;
	int m_doorUpdateCount;
	int m_doorIndex;
	int m_curMapIndex;
	int m_mapSpeed;
	int m_bossRoomNum;
	int m_startReturnCount;
	int m_explodeBloodCount;
	int m_addRedCount;
	int m_guideCount;
	int m_invincibleCount;
	int m_bobMusicCount;
	int m_goodsCount;
	int m_moneyCount;
	bool m_isInvincible;
	bool m_bloodVisible;
	bool m_isStart;
	bool m_isFireFly;
	bool m_right;
	bool m_left;
	bool m_up;
	bool m_down;
	bool m_VSVisible;
	bool m_ExplodeVisible;
	int m_isStartMusic;
	DWORD*m_pPPixelBullet;
	DWORD*m_pPPixelBoss;
	DWORD*m_pPPixelBody;
	DWORD*m_pPPixelHead;
	Map*m_pMap;
	CFire*m_pFire;
	CFly*m_pFly;
	CFlyMonster*m_pFlyMonster;
	CFlyDuke *m_pFlyDuke;
	CDoor*m_pDoor;
	CPlayerHead*m_pPlayerHead;
	CPlayerBody*m_pPlayerBody;
	CPoolManager*m_pBulletPool;
	CPoolManager*m_pPathBullet;
	CSingleImg*m_pBlood;
	CSingleImg*m_pExplodeBlood;
	CSingleImg*m_pHeart;
	CSingleImg*m_pNumber;
	CSingleImg*m_pNumber1;
	CMonsterDead*m_pMonsterDead;
	CGuide*m_pGuide;
	CHeart*m_pPlayerHeart;
	CBombExplode*m_pBombExplode;
	CTile*m_pTile;
	CBob*m_pBob;
	CMask*m_pMask;
	CMaskHeart*m_pMaskHeart;
	CFeceMonster*m_pFeceMonster;
	CMatherHeart*m_pMatherHeart;
	CStaticImg*m_pLost;
	CEnd*m_pEnd;
	CPlat*m_pPlat;
	CMushroom*m_pMushroom;
	CShoe*m_pShoe;
	CEye*m_scissor;
	CBomb*m_pBomb;
	CLeg*m_pLeg;
	CAngel*m_pAngel;
	CHP*m_pPlayerHP;
	CMoney*m_pMoney;
	map<int, Map*>m_map;
	map<int,Map*>m_stone;
	map<int,CDoor*>m_door;
	map<int,CGuide*>m_guide;
	map<int, CMaskHeart*>m_maskHeart;
	map<int, CMaskHeart*>m_HEART;
	vector<CGoods*>m_goods;
	vector<CBob*>m_bob;
	vector<CBombExplode*>m_bombExplode;
	vector<Map*>m_startSurface;
	vector<CFire*>m_fire;
	vector<CFly*>m_fly;
	vector<CFlyMonster*>m_flyMonster;
	vector<CHeart*>m_heart;
	vector<CTile*>m_tile;
	vector<CMonsterDead*>m_monsterDead;
	vector<CMask*>m_mask;
	vector<CFeceMonster*>m_feceMonster;
	vector<CMoney*>m_money;
};

